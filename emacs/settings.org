* Server

Start Emacs server so that we can open files from other places (such as terminal
emulators) in Emacs.

#+BEGIN_SRC emacs-lisp
(server-start)
#+END_SRC

Once the server is started, one can /attach/ to it by using =emacsclient -n
...=.

* Fanfare

By default various /messages/ and /texts/ will appear when starting Emacs. This
aim at removing these. Also, a bunch or UI elements should be hidden.

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t ; Hide the "welcome" screen
      initial-scratch-message nil) ; No comments in the scratch buffer

(defun display-startup-echo-area-message () nil) ; Hide the "For information..." message

(tool-bar-mode 0) ; Hide the tool bar
(tooltip-mode 0) ; Hide any tooltip
(menu-bar-mode 0) ; Hide the menu bar
(toggle-scroll-bar 0) ; Hide the scroll bar

;; HACK The new line ensures that the window title does not include the frame size
(setq frame-title-format '("Emacs\n"))

;; Make the meta/alt key great again
(when (eq system-type 'darwin)
  (setq mac-right-option-modifier 'none))
#+END_SRC

* Customize

Make Customize only write into its own file, than we can load. If we don't do
this Customize will edit our own configuration file(s), which is intrusive.

#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file)
#+END_SRC

* Backups

Control where Emacs write backup files. If we don't do this backup files will
accumulate absolutely everywhere in the filesystem.

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist `(("." . "~/.emacs.d/backups")))
#+END_SRC

* Custom Variables

These variables will be used throughout the configuration file. More /specific/
variables might be defined in other places.

#+BEGIN_SRC emacs-lisp
(setq configuration-file-path "~/.emacs.d/init.el")
(setq confiorgation-file-path "~/.emacs.d/settings.org")
#+END_SRC

* Reload Emacs

This function allows to quickly reload Emacs. It should be bound to some keys
later on.

#+BEGIN_SRC emacs-lisp
(defun reload-emacs ()
  "Reload emacs"
  (interactive)
  (load-file configuration-file-path))
#+END_SRC

* =use-package=

#+BEGIN_SRC emacs-lisp
(require 'use-package)
#+END_SRC

=use-package= can make sure packages are installed when starting Emacs. This is
usually done with =:ensure t= but we basically want this for all packages so:

#+BEGIN_SRC emacs-lisp
(require 'use-package-ensure)
(setq use-package-always-ensure t)
#+END_SRC

We also want to have all our packages automatically kept up to date. I guess
this can break Emacs's configuration from time to time, but I never had any
issues so far:

#+BEGIN_SRC emacs-lisp
(use-package auto-package-update
  :config
  (setq auto-package-update-delete-old-versions t)
  (setq auto-package-update-hide-results t)
  (auto-package-update-maybe))
#+END_SRC

Some important stuff regarding =use-package=:

+ The name of the package to be installed may not be the name of the package's
  GitHub repository. It is the **MELPA** name (which might be the same, but
  sometimes it's not).
+ =:init= allows to run code **before** a package is loaded.
+ =:config= allows to run code **after** a package is loaded. This is usually
  the one to use.
+ Using =:bind= and/or =:command= allows for some nice lazy-loading
  mechanisms. I don't use those for now but it might be worth checking if
  startup time increases.
+ =:bind= is not used in this configuration. All bindings are loaded at once
  using =general.el= instead.

* =quelpa=

#+BEGIN_SRC emacs-lisp
(use-package quelpa)
(use-package quelpa-use-package)
#+END_SRC

* Theme

Make sure to set up the theme before faces configuration, as most themes
overwrite them.

#+BEGIN_SRC emacs-lisp
;; (use-package base16-theme
;;   :init
;;   (setq base16-distinct-fringe-background nil)
;;   :config
;;   (load-theme 'base16-default-dark t))

(use-package modus-themes
  :config
  (load-theme 'modus-vivendi t))

;; (use-package doom-themes
;;   :config
;;   ;; Global settings (defaults)
;;   (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
;;         doom-themes-enable-italic t) ; if nil, italics is universally disabled
;;   (load-theme 'doom-one t)
;;   ;; Corrects (and improves) org-mode's native fontification.
;;   (doom-themes-org-config))
#+END_SRC

* Faces

What I want is basically one font everywhere, except for stuff that is /prose/
such as Org or Markdown.

#+BEGIN_SRC emacs-lisp
(setq code-font "Iosevka"
      prose-font "Iosevka Slab")
#+END_SRC

In order to do so we setup our /main/ font as the =default= one:

#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :font code-font :height 170)
#+END_SRC

And then we setup hooks for modes on which we want our alternate font. For
certain modes, additial faces must be set as we have code /inside/ prose.

** Org

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook
          (lambda ()
            (setq buffer-face-mode-face '(:family "Iosevka Slab")) (buffer-face-mode)))

(set-face-attribute 'org-block-begin-line nil :font code-font)
(set-face-attribute 'org-block-end-line nil :font code-font)
(set-face-attribute 'org-block nil :font code-font)
(set-face-attribute 'org-verbatim nil :font code-font)
#+END_SRC

** Markdown

This is not done yet...

* =org=

The Org package is loaded in =init.el= as I store my configuration in Org
format. But the configuration of Org itself is done here.

#+BEGIN_SRC emacs-lisp
(setq org-startup-folded t
      org-startup-indented t
      org-src-fontify-natively t
      org-src-window-setup 'other-window
      org-src-preserve-indentation t
      org-src-tab-acts-natively t)
#+END_SRC

* =general.el=

#+BEGIN_SRC emacs-lisp
(use-package general)
#+END_SRC

* =undo-fu=

Acts as an undo/redo system for =evil=.

#+BEGIN_SRC emacs-lisp
(use-package undo-fu)
#+END_SRC

* =evil=

#+BEGIN_SRC emacs-lisp
(use-package evil
  :init
  (setq evil-vsplit-window-right t
        evil-split-window-below t
        evil-want-C-u-scroll t
        evil-emacs-state-message nil
        evil-motion-state-message nil
        evil-insert-state-message nil
        evil-replace-state-message nil
        evil-visual-state-message nil
        evil-want-keybinding nil ; Required by evil-collection
        evil-replace-state-message nil
        evil-search-module 'evil-search
        evil-undo-system 'undo-fu)
  :config
  (evil-mode))

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))

(use-package evil-commentary
  :config
  (evil-commentary-mode))
#+END_SRC

* =ivy=

#+BEGIN_SRC emacs-lisp
(use-package ivy
  :init
  (setq ivy-use-virtual-buffers t
        enable-recursive-minibuffers t
        ivy-height 10
        ivy-fixed-height-minibuffer t
        ivy-count-format "%d/%d "
        ivy-re-builders-alist '((t . ivy--regex-plus)))
  :config
  (ivy-mode))

;; (use-package all-the-icons-ivy-rich
;;   :config
;;   (all-the-icons-ivy-rich-mode))

(use-package ivy-rich
  :init
  (setq ivy-rich-path-style 'abbrev)
  :config
  (ivy-rich-mode))
#+END_SRC

* =counsel=

#+BEGIN_SRC emacs-lisp
(use-package counsel)
#+END_SRC

* =dired=

The =dired= package itself is built into Emacs, but it is extended and
configured here.

#+BEGIN_SRC emacs-lisp
;; (use-package dired+
;;   :quelpa (dired+ :fetcher github :repo "emacsmirror/dired-plus"))

;; (use-package all-the-icons-dired
;;   :config
;;   (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
#+END_SRC

* =auto-fill-mode=

For text documents, do not let lines go beyound 80 characters. This does not
apply to code.

#+BEGIN_SRC emacs-lisp
(setq fill-column 80)
(add-hook 'text-mode-hook #'auto-fill-mode)
#+END_SRC

* =command-log-mode=

Display all commands which are ran! I use this to debug my configuration...

#+BEGIN_SRC emacs-lisp
(use-package command-log-mode)
#+END_SRC

* =which-key=

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :config
  (which-key-mode)
  (which-key-setup-side-window-bottom))
#+END_SRC

* =dired-sidebar=

#+BEGIN_SRC emacs-lisp
(use-package dired-sidebar
  :config
  (setq dired-sidebar-theme 'none))
#+END_SRC

* =doom-modeline=

#+BEGIN_SRC emacs-lisp
;; (use-package doom-modeline
;;   :ensure t
;;   :config
;;   (doom-modeline-mode)
;;   (setq doom-modeline-height 20
;;         doom-modeline-icon nil
;;         doom-modeline-major-mode-icon nil
;;         doom-modeline-buffer-state-icon nil
;;         doom-modeline-buffer-modification-icon nil
;;         doom-modeline-unicode-fallback t
;;         doom-modeline-buffer-encoding nil
;;         doom-modeline-indent-info nil
;;         doom-modeline-checker-simple-format t
;;         doom-modeline-lsp t
;;         doom-modeline-github nil
;;         doom-modeline-modal-icon t
;;         doom-modeline-mu4e nil
;;         doom-modeline-gnus nil
;;         doom-modeline-irc nil
;;         doom-modeline-env-version nil))
#+END_SRC

* Custom Modeline

#+BEGIN_SRC emacs-lisp
#+END_SRC

* =lsp=

#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :config
  (setq lsp-lens-enable nil
        lsp-headerline-breadcrumb-enable nil))
#+END_SRC

* =company=

#+BEGIN_SRC emacs-lisp
(use-package company)
#+END_SRC

* TypeScript

#+BEGIN_SRC emacs-lisp
(use-package typescript-mode)
#+END_SRC

* Load this configuration file automatically

#+BEGIN_SRC emacs-lisp
(find-file confiorgation-file-path)
#+END_SRC

* Bindings

The following bindings must be present /everywhere/. Hence they are set using
=override=. If we don't do this, other plugins might hook on them:

#+BEGIN_SRC emacs-lisp
(general-define-key
 :states '(normal visual emacs motion)
 :keymaps 'override
 :prefix "SPC"

 "s" '(evil-write :wk "Save buffer")
 "S" '(evil-write-all :wk "Save all buffers")

 "z" '(swiper :wk "Search buffer")
 "Z" '(swiper-all :wk "Search all buffers")

 "r" '(reload-emacs :wk "Reload Emacs")

 "n" '(evil-ex-nohighlight :wk "Toggle highlighting off")

 "e" '(dired-sidebar-toggle-with-current-directory :wk "Toggle sidebar explorer")
 "E" '(dired-sidebar-toggle-sidebar :wk "Toggle sidebar explorer")

 "?" '(counsel-describe-symbol :wk "Describe symbol")
 ":" '(counsel-M-x :wk "Run command")

 "SPC" '(counsel-switch-buffer :wk "Switch buffer")

 ;; ---------------------

 "f" '(:ignore t :which-key "Find")

 "f f" '(counsel-find-file :wk "Find file")

 ;; ---------------------

 "a" '(:ignore t :which-key "Windows")

 "a h" '(evil-window-left :wk "Go to left window")
 "a j" '(evil-window-down :wk "Go to bottom window")
 "a k" '(evil-window-up :wk "Go to top window")
 "a l" '(evil-window-right :wk "Go to right window")

 "a H" '(evil-window-move-far-left :wk "Move window to the left")
 "a J" '(evil-window-move-very-bottom :wk "Move window to the bottom")
 "a K" '(evil-window-move-very-top :wk "Move window to the top")
 "a L" '(evil-window-move-far-right :wk "Move window to the right")

 "a q" '(evil-quit :wk "Quit")
 "a d" '(evil-delete-buffer :wk "Delete buffer")
 "a s" '(evil-window-split :wk "Split window horizontally")
 "a S" '(evil-window-vsplit :wk "Split window vertically")
 "a v" '(evil-window-vsplit :wk "Split window vertically"))
#+END_SRC

* =diminish=

Hide the minor modes we don't care about in the status line. This should be
present near the end of the configuration file.

#+BEGIN_SRC emacs-lisp
(use-package diminish
  :config
  (eval-after-load 'org-indent '(diminish 'org-indent-mode))

  (diminish 'all-the-icons-dired-mode)
  (diminish 'auto-fill-function)
  (diminish 'buffer-face-mode)
  (diminish 'evil-collection-unimpaired-mode)
  (diminish 'evil-commentary-mode)
  (diminish 'ivy-mode)
  (diminish 'which-key-mode))
#+END_SRC
